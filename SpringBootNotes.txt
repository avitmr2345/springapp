>> Spring Boot
Spring Boot is an extension of the Spring framework that simplifies the process of building production-ready applications. It provides a set of conventions and defaults to streamline configuration and setup, allowing developers to focus on building features rather than dealing with boilerplate code.

Key Features :
Auto-Configuration: Automatically configures your application based on the dependencies present on the classpath, reducing the need for manual configuration.

Standalone Applications: Spring Boot applications can run as standalone Java applications, simplifying deployment.

Embedded Servers: It includes embedded servers like Tomcat, Jetty, or Undertow, which means you don't need to deploy your application to an external server.

Production-Ready Features: Built-in features like health checks, metrics, and externalized configuration make it easier to create robust applications ready for production.

Microservices Ready: Spring Boot is a popular choice for building microservices due to its lightweight nature and easy integration with Spring Cloud for distributed systems.

Convention Over Configuration: It follows a convention-over-configuration approach, minimizing the amount of configuration required.

>> Maven
Maven is a build automation and project management tool primarily used for Java projects. It simplifies the process of managing project dependencies, building projects, and deploying applications. Maven need project coordinates to uniquely identify a project which are GAV (Group ID- name of group or company, Artifact ID- name of the project, Version)

Key Features :
Project Object Model (POM): Maven uses a POM file (pom.xml) to manage project configuration, including dependencies, plugins, and project metadata.

Dependency Management: It allows you to declare project dependencies in the POM file, automatically downloading the required libraries from repositories (like Maven Central) and managing their versions.

Build Lifecycle: Maven has a defined lifecycle with phases (like compile, test, package, and install), which simplifies the build process by providing a consistent way to manage project builds.

Plugins: Maven’s functionality can be extended using plugins. These can handle tasks such as compiling code, running tests, generating documentation, and deploying applications.

Convention over Configuration: Maven follows a set of conventions that minimize the need for custom configuration, making it easier to manage projects.

>> Spring Boot Starters
Spring Boot starters are a set of convenient dependency descriptors you can include in your application to easily add functionality or simply we can say, a collection of maven dependencies and it also make sure you have compatible versions. They simplify the process of adding new features by bundling commonly used libraries and their configurations.

Benefits of Using Starters:
Simplified Dependency Management: You don’t have to manage versions for each library.
Quick Setup: Quickly get started with pre-configured libraries.
Best Practices: Bundles commonly used libraries that follow Spring’s conventions.

>> Spring Boot Starter Parent 
Spring Boot Starter Parent is a special starter that provides a foundational structure for your application. It helps simplify dependency management and project configuration. It is a special starter that provides Maven defaults like encoding, java version etc.

Key Features:
Dependency Management: It manages versions of commonly used dependencies, so you don’t have to specify versions in your pom.xml. This ensures compatibility between different libraries.
Default Plugins: It provides default Maven plugins, which simplifies the build process. It configures the spring-boot-maven-plugin for you.
Configuration: It sets up sensible defaults for Spring Boot applications, making it easier to get started.

>> Spring Boot Actuator
Spring Boot Actuator is an essential tool for monitoring and managing your Spring Boot applications. It exposes various endpoints that give insights into the application's health, metrics, environment, and more.

Key Features:
Health Checks: Provides an endpoint to check the health of your application, including database connectivity, service availability, and other custom health indicators.
Metrics: Gathers application metrics, such as memory usage, garbage collection, and request statistics, which can be accessed via an endpoint.
Environment Information: Exposes information about the application’s environment, including configuration properties and active profiles.
Application Info: Provides details about the application, such as version and description, which can be customized.
Custom Endpoints: You can create your own endpoints to expose additional functionality.